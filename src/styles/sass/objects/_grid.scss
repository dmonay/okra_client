// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source


//
// Variables
//

$row-width: rem-calc(1000) !default;
$column-gutter: rem-calc(30) !default;
$total-columns: 12 !default;

$default-float: left !default;
$opposite-direction: right !default;

//
// Visibility Classes
//

$screen-xs-min: $break-handheld-wide - 1;
$screen-sm-min: $break-lap - 1;
$screen-md-min: $break-desktop - 1;

$screen-xs-max: $break-handheld-wide;
$screen-sm-max: $break-lap;
$screen-md-max: $break-desktop;


.visible-xs {
    @media (min-width: $screen-xs-max) {
        display: none !important;
    }
}

.hidden-xs {
    @media (max-width: $screen-xs-min) {
        display: none !important;
    }
}

.visible-sm {
    @media (min-width: $screen-sm-max) {
        display: none !important;
    }
}

.hidden-sm {
    @media (max-width: $screen-sm-min) {
        display: none !important;
    }
}

.visible-md {
    @media (min-width: $screen-md-max) {
        display: none !important;
    }
}

.hidden-md {
    @media (max-width: $screen-md-min) {
        display: none !important;
    }
}

//
// Float Classes
//

.pull-left {
    float: left !important;
}

.pull-right {
    float: right !important;
}

//
// Text Align
//

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

.text-left {
    text-align: left;
}


// For creating container, nested, and collapsed rows.
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
@mixin grid-row($behavior: false) {

    // Clearfix for all rows
    @extend %clearfix;

    // use @include grid-row(nest); to include a nested row
    @if $behavior == nest {
        width: auto;
        margin-#{$default-float}: -($column-gutter/2);
        margin-#{$opposite-direction}: -($column-gutter/2);
        margin-top: 0;
        margin-bottom: 0;
        max-width: none;
    }

    // use @include grid-row(collapse); to collapsed a container row margins
    @else if $behavior == collapse {
        width: 100%;
        margin: 0;
        max-width: $row-width;
    }

    // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
    @else if $behavior == nest-collapse {
        width: auto;
        margin: 0;
        max-width: none;
    }

    // use @include grid-row; to use a container row
    @else {
        width: 100%;
        margin-#{$default-float}: auto;
        margin-#{$opposite-direction}: auto;
        margin-top: 0;
        margin-bottom: 0;
        max-width: $row-width;
    }
}



// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.

@mixin grid-column(
    $columns:false,
    $last-column:false,
    $center:false,
    $offset:false,
    $push:false,
    $pull:false,
    $collapse:false,
    $float:true,
    $position:false) {

    // If positioned for default .col, include relative position
    // push and pull require position set
    @if $position or $push or $pull {
        position: relative;
    }

    // If collapsed, get rid of gutter padding
    @if $collapse {
        padding-left: 0;
        padding-right: 0;
    }

    // Gutter padding whenever a column isn't set to collapse
    // (use $collapse:null to do nothing)
    @else if $collapse == false {
        padding-left: $column-gutter / 2;
        padding-right: $column-gutter / 2;
    }

    // If a column number is given, calculate width
    @if $columns {
        width: grid-calc($columns, $total-columns);

        // If last column, float naturally instead of to the right
        @if $last-column {
            float: $opposite-direction;
        }
    }

    // Source Ordering, adds left/right depending on which you use.
    @if $push {
        #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto;
    }

    @if $pull {
        #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto;
    }

    @if $float {
        @if $float == left or $float == true {
            float: $default-float;
        }
        @else if $float == right {
            float: $opposite-direction;
        }
        @else {
            float: none;
        }
    }

    // If centered, get rid of float and add appropriate margins
    @if $center {
        margin-#{$default-float}: auto;
        margin-#{$opposite-direction}: auto;
        float: none;
    }

    // If offset, calculate appropriate margins
    @if $offset {
        margin-#{$default-float}: grid-calc($offset, $total-columns) !important;
    }
}


// Create presentational classes for grid
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.

@mixin grid-html-classes($size) {
    @for $i from 0 through $total-columns - 1 {
        .#{$size}-push-#{$i} {
            @include grid-column($push:$i, $collapse:null, $float:false);
        }
        .#{$size}-pull-#{$i} {
            @include grid-column($pull:$i, $collapse:null, $float:false);
        }
    }

    .col,
    .cols {
        @include grid-column($columns:false, $position:true);
    }


    @for $i from 1 through $total-columns {
        .#{$size}-#{$i} {
            @include grid-column($columns:$i, $collapse:null, $float:false);
        }
    }

    [class*="col"] + [class*="col"]:last-child {
        float: $opposite-direction;
    }

    [class*="col"] + [class*="col"].end {
        float: $default-float;
    }


    @for $i from 0 through $total-columns - 1 {
        .#{$size}-offset-#{$i} {
            @include grid-column($offset:$i, $collapse:null, $float:false);
        }
    }

    .#{$size}-reset-order {
        float: $default-float;
        left: auto;
        right: auto;
        margin-#{$default-float}: 0;
        margin-#{$opposite-direction}: 0;
    }

    .col.#{$size}-centered,
    .cols.#{$size}-centered {
        @include grid-column($center:true, $collapse:null, $float:false);
    }

    .col.#{$size}-uncentered,
    .cols.#{$size}-uncentered {
        margin-#{$default-float}: 0;
        margin-#{$opposite-direction}: 0;
        float: $default-float !important;
    }

    .col.#{$size}-uncentered.opposite,
    .cols.#{$size}-uncentered.opposite {
        float: $opposite-direction;
    }
}

.row {
    @include grid-row;

    &.collapse {
        > .col,
        > .cols {
            @include grid-column($collapse:true, $float:false);
        }

        .row {
            margin-left:0;
            margin-right:0;
        }
    }

    .row {
        @include grid-row($behavior:nest);

        &.collapse {
            @include grid-row($behavior:nest-collapse);
        }
    }
}

.col,
.cols {
    @include grid-column($columns:$total-columns);
}

@include grid-html-classes($size:xs);

@include respond-min($break-handheld-wide) {
    @include grid-html-classes($size:small);

    // Old push and pull classes
    @for $i from 0 through $total-columns - 1 {
        .push-#{$i} {
            @include grid-column($push:$i, $collapse:null, $float:false);
        }
        .pull-#{$i} {
            @include grid-column($pull:$i, $collapse:null, $float:false);
        }
    }
}

@include respond-min($break-lap) {
    @include grid-html-classes($size:medium);

    // Old push and pull classes
    @for $i from 0 through $total-columns - 1 {
        .push-#{$i} {
            @include grid-column($push:$i, $collapse:null, $float:false);
        }
        .pull-#{$i} {
            @include grid-column($pull:$i, $collapse:null, $float:false);
        }
    }
}

@include respond-min($break-desktop) {
    @include grid-html-classes($size:large);

    @for $i from 0 through $total-columns - 1 {
        .push-#{$i} {
            @include grid-column($push:$i, $collapse:null, $float:false);
        }
        .pull-#{$i} {
            @include grid-column($pull:$i, $collapse:null, $float:false);
        }
    }
}

@mixin col--no-gutter {
    padding-left: 0;
    padding-right: 0;
}

@mixin col--no-gutter-right {
    padding-right: 0;
}

@mixin col--no-gutter-left {
    padding-left: 0;
}

.col--no-gutter,
%col--no-gutter,
.cols--no-gutter,
%cols--no-gutter {
    padding-left: 0;
    padding-right: 0;
}

.col--no-gutter-right,
%col--no-gutter-right,
.cols--no-gutter-right {
    padding-right: 0;
}

.col--no-gutter-left,
.cols--no-gutter-left {
    padding-left: 0;
}

.col--no-gutter-mobile {
    @include respond-max ($break-lap) {
        padding-left: 0;
        padding-right: 0;
    }
}

.col--no-gutter-desktop {
    @include respond-min ($break-lap) {
        padding-left: 0;
        padding-right: 0;
    }
}
